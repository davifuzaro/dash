Ok! Vou te guiar passo a passo de forma bem clara! üìù
üéØ PASSO A PASSO COMPLETO:
PASSO 1: Abra o arquivo server/services/ai-service.ts
PASSO 2: Localize o m√©todo calculateMetrics (por volta da linha 68)
PROCURE POR:
typescriptprivate calculateMetrics(licenciados: any[]) {
SUBSTITUA TODO O M√âTODO pelo c√≥digo abaixo:
typescriptprivate calculateMetrics(licenciados: any[]) {
  const total = licenciados.length;
  
  console.log("üîç DEBUG METRICS - Analisando colunas para status ativo...");
  
  // Verificar diferentes possibilidades de nome da coluna
  const possibleActiveColumns = [
    "Data Ativo", "DataAtivo", "data_ativo", "DATA_ATIVO", 
    "Data_Ativo", "dataAtivo", "Data ativo", "data ativo"
  ];
  
  let activeColumnName = null;
  if (licenciados.length > 0) {
    const firstRecord = licenciados[0];
    for (const colName of possibleActiveColumns) {
      if (firstRecord.hasOwnProperty(colName)) {
        activeColumnName = colName;
        console.log(`‚úÖ Coluna de status encontrada: "${colName}"`);
        break;
      }
    }
    
    if (!activeColumnName) {
      console.log("‚ùå ERRO: Nenhuma coluna de status ativo encontrada!");
      console.log("Colunas dispon√≠veis:", Object.keys(firstRecord));
    }
  }
  
  // Calcular ativos
  const ativos = activeColumnName 
    ? licenciados.filter(l => {
        const valor = l[activeColumnName];
        const isActive = valor && valor.toString().trim() !== "";
        return isActive;
      }).length
    : 0;
  
  console.log(`üìä Ativos encontrados: ${ativos} de ${total}`);
  
  const inativos = total - ativos;
  const taxaConversao = total > 0 ? (ativos / total) * 100 : 0;

  // Resto do c√≥digo continua igual...
  const graduacoes = licenciados.reduce((acc, l) => {
    const grad = l["Gradua√ß√£o"] || l["graduacao"] || l["GRADUACAO"] || "Sem Gradua√ß√£o";
    acc[grad] = (acc[grad] || 0) + 1;
    return acc;
  }, {});

  const estados = licenciados.reduce((acc, l) => {
    const uf = l["UF"] || l["uf"] || l["Uf"] || "N/A";
    acc[uf] = (acc[uf] || 0) + 1;
    return acc;
  }, {});

  const totalClientes = licenciados.reduce((sum, l) => {
    return sum + (parseInt(l["Clientes Ativos"]) || 0);
  }, 0);
  
  const mediaClientesPorLicenciado = ativos > 0 ? totalClientes / ativos : 0;

  const result = {
    total,
    ativos,
    inativos,
    taxaConversao: parseFloat(taxaConversao.toFixed(2)),
    graduacoes,
    estados,
    totalClientes,
    mediaClientesPorLicenciado: parseFloat(mediaClientesPorLicenciado.toFixed(2))
  };
  
  console.log("üìä M√âTRICAS FINAIS:", result);
  
  return result;
}
PASSO 3: Localize o m√©todo chatQuery (por volta da linha 160)
No in√≠cio do m√©todo, logo ap√≥s o try {, adicione estes logs:
typescriptasync chatQuery(message: string, context?: any): Promise<ChatMessage> {
  try {
    // SEMPRE buscar dados atualizados do Google Sheets
    const licenciados = await this.getLicenciadosFromSheets();
    
    // ADICIONE ESTES LOGS AQUI! üëá
    console.log("\n=== DEBUG CHAT QUERY ===");
    console.log("üîç Total licenciados carregados:", licenciados.length);
    if (licenciados.length > 0) {
      console.log("üîç Primeiro registro (para ver colunas):");
      console.log(JSON.stringify(licenciados[0], null, 2));
    }
    
    const metrics = this.calculateMetrics(licenciados);
    console.log("üìä M√©tricas calculadas:", metrics);
    console.log("=== FIM DEBUG ===\n");
    // FIM DOS LOGS üëÜ

    // Resto do c√≥digo continua...
PASSO 4: Encontre a vari√°vel systemPrompt (por volta da linha 220)
PROCURE POR:
typescriptconst systemPrompt = `Voc√™ √© GAIA
SUBSTITUA TODO O systemPrompt por:
typescriptconst systemPrompt = `Voc√™ √© GAIA, assistente de dados da iGreen Energy.

REGRA #1: Use SEMPRE os n√∫meros exatos fornecidos no JSON abaixo.
REGRA #2: NUNCA diga que precisa consultar dados - voc√™ J√Å TEM os dados.
REGRA #3: Responda de forma direta com os n√∫meros do JSON.

Exemplos de respostas corretas:
- "Temos exatamente X licenciados ativos"
- "A taxa de convers√£o atual √© Y%"
- "Do total de Z licenciados, X est√£o ativos e W inativos"

NUNCA responda com:
- "Preciso consultar os dados..."
- "Para calcular isso..."
- "Vou verificar a base..."

Os dados j√° est√£o no JSON fornecido. Use-os diretamente!`;
PASSO 5: Logo ap√≥s definir o systemPrompt, encontre onde chama openai.chat.completions.create
MUDE A MENSAGEM do usu√°rio para:
typescript{
  role: "user",
  content: `Pergunta do usu√°rio: ${message}

DADOS ATUALIZADOS (USE ESTES N√öMEROS NA SUA RESPOSTA):
- Total de licenciados: ${relevantData.totalLicenciados}
- Licenciados ATIVOS: ${relevantData.licenciadosAtivos}
- Licenciados inativos: ${relevantData.licenciadosInativos}
- Taxa de convers√£o: ${relevantData.taxaConversao}%

Responda a pergunta usando os n√∫meros acima.`,
}
PASSO 6: Salve o arquivo
PASSO 7: Reinicie o servidor
bash# Pare o servidor (Ctrl+C)
# Inicie novamente
npm run dev
PASSO 8: Teste no chat
Pergunte:

"Quantos licenciados ativos temos?"

PASSO 9: Veja o console do servidor
Voc√™ deve ver algo como:
=== DEBUG CHAT QUERY ===
üîç Total licenciados carregados: 65467
üîç Primeiro registro (para ver colunas):
{
  "Codigo": "123",
  "Nome": "Jo√£o",
  "Data Ativo": "01/01/2024",
  ...
}
üìä M√©tricas calculadas: {
  total: 65467,
  ativos: 44500,
  inativos: 20967,
  taxaConversao: 68.5
}
=== FIM DEBUG ===
PASSO 10: Me mostre o que apareceu no console!
Copie e cole aqui:

O que apareceu no console
O que a GAIA respondeu

Com essas informa√ß√µes, vou saber exatamente o que est√° errado! üéØ